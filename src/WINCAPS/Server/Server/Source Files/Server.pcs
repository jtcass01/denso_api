'!TITLE "Server.pcs"
' AUTHOR : 		Jacob Taylor Cassady
' DESCRIPTION : TCP Server.

Sub Main										' START Server
	Dim response as String						' Create a variable to store the response
	Dim variables as Variant
	Dim method_enum as Integer
	Dim index as Integer
	Dim parameter_count as Integer

	PrintDbg "Initializing Port 4 - TCP Server"
	Comm.Open 4									' Open port number 4 (TCP Server)
	Comm.Clear 4								' Clear port number 4

	PrintDbg "Waiting for connection from the client."
	Wait Comm.State(4) = 2 						' Wait for connection from the client.

	On Error Goto ErrorHandler					' Create disconnect error handler

	PrintDbg "Connection established.  Looping for reception of commands."
	I1 = 0
	Do											' Start a constant loop for reception
		PrintDbg "Waiting for input from Port 4"		
		response = Comm.Input(4)				' Recieve input from the user
		PrintDbg "Input recieved: " & response  ' Print the debug the message system.
		PrintDbg "Attempting to decode...."
		variables = split(response, ",")		' Split the response using the comma as a delimeter.  Store as array

		' Variables are formatted in the following order, each separated by a comma
		' function_enum
		' parameter_count
		' p[0], p[1], ..., p[parameter_count - 1]
		method_enum = variables( 0 )			' Retrieve the function enum
		parameter_count = variables( 1 )			' Retrieve the number of parameters

		PrintDbg "function_enum: " & Str( method_enum )  ' Print the debug the message system.
		PrintDbg "parameter_count: " & Str( parameter_count )  ' Print the debug the message system.

		Dim parameters(10) as Double

		for index = 0 To (parameter_count-1)
			Let parameters( index ) = variables( index + 2 )
			PrintDbg "parameters( " & Str( index ) & " ) = " & variables( index + 2 )
		Next

		PrintDbg "Done printing parameters.  Entering Select statement."

		Select Case method_enum
		Case 1
			PrintDbg "Going to method_1"
			GoTo method_1
		Case 2
			PrintDbg "Going to draw_method"
			GoTo draw_method
		Case Else
			PrintDbg "Going to improper_response"
			GoTo improper_response
		End Select

		PrintDbg "Finished select Case."

		Delay 1
	Loop Until I1<>0

	Comm.Close 4								' Close port 4
	Exit Sub									' END MAIN


ErrorHandler:									' BEGIN ERRORHANDLER
	Comm.Close 4, -1 							' Error occured disconnect from port 4
	PrintDbg "Err = " & Hex(Err.OriginalNumber)	' Print error number using hex representation.
	Comm.Open 4									' Open port 4
	Comm.Clear 4								' Clear port 4
	Wait Comm.State(4) = 2 						' Wait for connection from the client
	Resume 										' Clear the error-state, and resume the program from the line where an error occured	


method_1:
	PrintDbg "Method 1 has been called with the following parameters: "
	GoTo display_parameters

draw_method:
	PrintDbg "Draw has been called with the following parameters:"

	PrintDbg "Draw L, V( " & Str(parameters( 0 )) & ", " & Str(parameters( 1 )) & ", " & Str(parameters( 2 )) & " )"
	'Draw L, V ( parameters( 0 ), parameters( 1 ), parameters( 2 ) )


display_parameters:
	Dim parameter_index as Integer

	for parameter_index = 0 To (parameter_count - 1)
		PrintDbg "parameters( " & Str( parameter_index ) & " ) = " & parameters( parameter_index )
	Next

improper_response:
	PrintDbg "Entering improper_response method."

End Sub 										' END Program
