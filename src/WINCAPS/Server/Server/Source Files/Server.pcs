'!TITLE  : 		"Server.pcs"
' AUTHOR : 		Jacob Taylor Cassady
' DESCRIPTION : TCP Server.

Sub Main										' START Server
	Dim command as String						' Create a variable to store the response

	Call create_tcp_connection(4)

	On Error Goto ErrorHandler					' Create disconnect error handler

	PrintDbg "Connection established.  Looping for reception of commands."

	I1 = 0
	Do											' Start a constant loop for reception
		PrintDbg "Waiting for input from Port 4"		
		command = Comm.Input(4)				' Recieve input from the user

		PrintDbg "Issuing command: " & command	
		Call command_robot(command) 		' Call Command

		Delay 1
	Loop Until I1<>0

	Call end_tcp_connection(4)
	Exit Sub									' END MAIN


ErrorHandler:									' BEGIN ERRORHANDLER
	Call end_tcp_connection(4)

	PrintDbg "Err = " & Hex(Err.OriginalNumber)	' Print error number using hex representation.

	Call create_tcp_connection(4)

	Resume 										' Clear the error-state, and resume the program from the line where an error occured	
End Sub 


Sub command_robot( command As String )
	PrintDbg "Command recieved: " & command  ' Print the debug the message system.
	PrintDbg "Attempting to decode...."

	Dim parsed_command as Variant
	Dim command_enum as Integer

	' Parse the command
	parsed_command = split(command, ";")		' Split the response using the comma as a delimeter.  Store as array

	command_enum = parsed_command( 0 )			' Retrieve the function enum
	PrintDbg "command_enum: " & Str( command_enum )  ' Print the debug the message system.

	Select Case command_enum
	Case 1
		Call move_command( command )
	Case 2
		Call draw_command( command )
	Case Else
		PrintDbg "Command enum not recognized."
	End Select

End Sub


''' TCP CONNECTION METHODS  '''
Sub create_tcp_connection(port_number As Integer)
	PrintDbg "Opening a TCP connection over port: " & Str(port_number)
	Comm.Open port_number						' Open port number 4 (TCP Server)
	Comm.Clear port_number						' Clear port number 4

	PrintDbg "Waiting for connection from the client over port: " & Str(port_number)
	Wait Comm.State(port_number) = 2 			' Wait for connection from the client.
End Sub

Sub end_tcp_connection(port_number As Integer)
	Comm.Close port_number, -1					' Disconnect from port
	PrintDbg "Successfully disconnected from port: " & Str(port_number)
End Sub


''' MOVE METHODS  '''
Sub move_command( command As String )
	Dim parsed_command as Variant
	Dim interpolation_type As String
	Dim target As String

	' Parse the command
	parsed_command = split(command, ";")		' Split the response using the comma as a delimeter.  Store as array

	' Retrieve interpolation type
	interpolation_type = parsed_command(1)
	PrintDbg "Interpolation type = " & interpolation_type

	' target position
	target = Mid(command, InStrRev(command, ";") + 1)

	Select Case interpolation_type
	Case "P"
		TakeArm Keep=1
		Call move_ptp( target )
	Case "L"
		TakeArm Keep=1
		Call move_linear( target )
	Case Else
		PrintDbg "Interpolation method not recognized."
	End Select
End Sub


Sub move_ptp( target As String )
	PrintDbg "PTP Interpolation"
	Dim target_type As String
	Dim target_position As Position
	Dim target_joint As Joint

	' Determine position type:
	target_type = Left(target, 1)
	PrintDbg "target_type: " & target_type

	Select Case target_type
	Case "P"															' Position
		target_position = target
		PrintDbg "Move P, " & target
		Move P, target_position
	Case "J"															' Joint
		target_joint = target
		PrintDbg "Move P, " & target
		Move P, target_joint
	Case Else
		PrintDbg "target type not recognized."
	End Select
End Sub


Sub move_linear( target As String )
	PrintDbg "Linear Interpolation"
	Dim target_type As String
	Dim target_position As Position
	Dim target_joint As Joint

	' Determine position type:
	target_type = Left(target, 1)
	PrintDbg "target_type: " & target_type

	Select Case target_type
	Case "P"															' Position
		target_position = target
		PrintDbg "Move L, " & target
		Move L, target_position
	Case "J"															' Joint
		target_joint = target
		PrintDbg "Move L, " & target
		Move L, target_joint
	Case Else
		PrintDbg "Target position datatype type not recognized."
	End Select
End Sub

''' DRAW METHODS  '''
Sub draw_command( command As String )
	Dim parsed_command as Variant
	Dim interpolation_type As String
	Dim target As String

	' Parse the command
	parsed_command = split(command, ";")		' Split the response using the comma as a delimeter.  Store as array

	' Retrieve interpolation type
	interpolation_type = parsed_command(1)

	' target position
	target = Mid(command, InStrRev(command, ";") + 1)

	Select Case interpolation_type
	Case "P"
		TakeArm Keep=1
		Call draw_ptp( target )
	Case "L"
		TakeArm Keep=1
		Call draw_linear( target )
	Case Else
		PrintDbg "Interpolation method not recognized."
	End Select
End Sub


Sub draw_ptp( target As String )
	PrintDbg "PTP Interpolation"
	Dim target_type As String
	Dim target_vector As Vector

	' Determine target position type:
	target_type = Left(target, 1)
	PrintDbg "target_type: " & target_type

	Select Case target_type
	Case "V"															' Vector
		target_vector = target
		PrintDbg "Draw P, " & target_vector
		Draw P, target_vector
	Case Else
		PrintDbg "Target position datatype not recognized."
	End Select
End Sub

Sub draw_linear( target As String )
	PrintDbg "Linear Interpolation"
	Dim target_type As String
	Dim target_vector As Vector

	' Determine target position type:
	target_type = Left(target, 1)
	PrintDbg "target_type: " & target_type

	Select Case target_type
	Case "V"															' Vector
		target_vector = target
		PrintDbg "Draw L, " & target_vector
		Draw L, target_vector
	Case Else
		PrintDbg "Target position datatype not recognized."
	End Select
End Sub
