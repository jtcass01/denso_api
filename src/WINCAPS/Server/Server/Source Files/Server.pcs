'!TITLE  : 		"Server.pcs"
' AUTHOR : 		Jacob Taylor Cassady
' DESCRIPTION : TCP Server.

Sub Main										' START Server
	Dim command as String						' Create a variable to store the response
	Dim command_enum as Integer
	Dim parsed_command as Variant

	Call create_tcp_connection(4)

	On Error Goto ErrorHandler					' Create disconnect error handler

	PrintDbg "Connection established.  Looping for reception of commands."

	I1 = 0
	Do											' Start a constant loop for reception
		PrintDbg "Waiting for input from Port 4"		
		command = Comm.Input(4)				' Recieve input from the user
		PrintDbg "Command recieved: " & command  ' Print the debug the message system.
		PrintDbg "Attempting to decode...."
		parsed_command = split(command, ";")		' Split the response using the comma as a delimeter.  Store as array

		' Variables are formatted in the following order, each separated by a comma
		' function_enum
		' parameter_count
		' p[0], p[1], ..., p[parameter_count - 1]
		command_enum = parsed_command( 0 )			' Retrieve the function enum


		PrintDbg "command_enum: " & Str( command_enum )  ' Print the debug the message system.

		Delay 1
	Loop Until I1<>0

	Call end_tcp_connection(4)
	Exit Sub									' END MAIN


ErrorHandler:									' BEGIN ERRORHANDLER
	Call end_tcp_connection(4)

	PrintDbg "Err = " & Hex(Err.OriginalNumber)	' Print error number using hex representation.

	Call create_tcp_connection(4)

	Resume 										' Clear the error-state, and resume the program from the line where an error occured	
End Sub 


''' TCP CONNECTION METHODS  '''
Sub create_tcp_connection(port_number As Integer)
	PrintDbg "Opening a TCP connection over port: " & Str(port_number)
	Comm.Open port_number						' Open port number 4 (TCP Server)
	Comm.Clear port_number						' Clear port number 4

	PrintDbg "Waiting for connection from the client over port: " & Str(port_number)
	Wait Comm.State(port_number) = 2 			' Wait for connection from the client.
End Sub

Sub end_tcp_connection(port_number As Integer)
	Comm.Close port_number, -1					' Disconnect from port
	PrintDbg "Successfully disconnected from port: " & Str(port_number)
End Sub


Sub improper_response(response As String)
	PrintDbg "You entered an improper response : " & response
	PrintDbg "Please try again."
End Sub


''' MOVEMENT METHODS  '''
Sub ngs_draw( x_axis As Single, y_axis As Single, z_axis As Single )
	Dim destination_vector As Vector

	PrintDbg "ngs_draw has been called with the following parameters (" & Str(x_axis) & ", " & Str(y_axis) & ", " & Str(z_axis) & ")"
	PrintDbg "Creating Vector..."

	Let destination_vector = V(x_axis, y_axis, z_axis)

	PrintDbg "Draw L, V(" & Str(x_axis) & ", " & Str(y_axis) & ", " & Str(z_axis) & ")"
End Sub

Sub ngs_drive( axis_number As Single, displacement as Single)
	PrintDbg "Drive (" & Str(axis_number) & ", " & Str(displacement) & ")"
	' Drive (axis_number, displacement)
End Sub

Sub ngs_drive_absolute( axis_number As Single, displacement as Single)
	PrintDbg "DriveA (" & Str(axis_number) & ", " & Str(displacement) & ")"
	' DriveA (axis_number, displacement)
End Sub

Sub ngs_delay(delay_time as Single)
	PrintDbg "Delay " & Str(delay_time)
'	Delay delay_time
End Sub
